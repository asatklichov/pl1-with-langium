import { type Module, inject } from 'langium';
import { createDefaultModule, createDefaultSharedModule, type DefaultSharedModuleContext, type LangiumServices, type LangiumSharedServices, type PartialLangiumServices } from 'langium/lsp';
import { Pl1GeneratedModule, Pl1GeneratedSharedModule } from './generated/module.js';
import { Pl1Validator, registerValidationChecks } from './pl-1-validator.js';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type Pl1AddedServices = {
    validation: {
        Pl1Validator: Pl1Validator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type Pl1Services = LangiumServices & Pl1AddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const Pl1Module: Module<Pl1Services, PartialLangiumServices & Pl1AddedServices> = {
    validation: {
        Pl1Validator: () => new Pl1Validator()
    }
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createPl1Services(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    Pl1: Pl1Services
} {
    const shared = inject(
        createDefaultSharedModule(context),
        Pl1GeneratedSharedModule
    );
    const Pl1 = inject(
        createDefaultModule({ shared }),
        Pl1GeneratedModule,
        Pl1Module
    );
    shared.ServiceRegistry.register(Pl1);
    registerValidationChecks(Pl1);
    return { shared, Pl1 };
}
